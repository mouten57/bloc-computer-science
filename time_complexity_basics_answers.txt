///////////////////QUESTIONS///////////////////
1. What is time complexity and what is its relation to algorithms?

-Time complexity is the metric used to describe the efficiency of an algorithm. It helps us understand how an algorithm's speed changes based on the input size. Some algorithms may be quick with a small data set, but not as efficient with a larger data set.

2. What is runtime?

-physical time duration of an algorithm, but the term runtime is often used synonymously with time complexity.

3. How is the runtime of an algorithm calculated?

-add up how many instructions the algorithm will execute as a function of the size of its input, then simplifty the expression to the largest term and drop any constants.

4. Name the six types of algorithm growth rates we saw in this checkpoint and list them in order of most efficient to least efficient. Now Google another algorithmic growth rate not covered and place it in the correct spot in your list.

-constant growth gate 0(1)
-logarithmic growth rate 0(log n)
-linear growth rate 0(n)
-log-linear growth rate 0(n log n)
-quadratic growth rate 0(n^2)
-(googled) cubic growth rate 0(n^3)
-exponential growth rate 0(2^n)


5. Choose one of the algorithmic growth rates from the last question and make a comparison to a real-life situation.

-linear growth rate: washing n amount of dishes. For each dish, the function must be run, so the growth rate is 0(n).

6. Determine the time complexity of the following snippet of code. It is commonly known as a linear search.

FUNCTION linearSearch(array, target)
 FOR each number in the array
   IF number = target THEN
     RETURN true
   END IF
 END FOR
 RETURN false
END FUNCTION


GROWTH RATE: 0(n) -> linear growth rate
^I chose this because the function had a single for loop and the amount of times that it runs depends on the size of the array input.


7. Determine the time complexity of the following snippet of code.

If you get stuck, read through the graphical representation section again.

FUNCTION foo(array)
 FOR each number in the array
   FOR each number in the array
     print "Hello"
   END FOR
 END FOR
END FUNCTION


GROWTH RATE: 0(n^2) -> quadratic growth rate
^I chose this because the function contains a nested FOR loop.


8. Determine the time complexity of the following snippet of code. It is commonly known as the Fibonacci sequence.

FUNCTION fibonacci(number)
 IF number < 1 THEN
   ERROR
 ELSE IF number = 1 or 2 THEN
   RETURN 1
 ELSE
   CALL fibonacci WITH number - 2 RETURNING twoBack
   CALL fibonacci WITH number - 1 RETURNING oneBack
   RETURN twoBack + oneBack
 END IF
END FUNCTION


GROWTH RATE: 0(2^n) -> exponential growth rate
^I chose this because the function contains a recursive function.


9. Out of the code snippets you just saw, which is the most time efficient?

-The linear search is the most time efficient with a time effieciency of 0(n).