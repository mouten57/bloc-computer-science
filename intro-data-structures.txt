Excercises:

1. A line of people at an amusement park ride.
    -The line is composed of members, represented as strings.
    -There is a front to the line, as well as a back.
    -When someone enters the line, place them at the end.
    -People may leave the line whenever they see fit, and those behind them take their place.

Given the above real-world information, use an array data structure to code the following solution.

a) Use an array input: ["Vivian", "Ava", "Josh", "Patrick", "Mike"]

let amusementParkMembers = ["Vivian", "Ava", "Josh", "Patrick", "Mike"]

b) Insert a new person, "Mary" at the end of the line. In other words, you should insert Mary after Mike.

let newPerson = (name) => {
      amusementParkMembers.push(name)};

console.lognewPerson('Mary'); //Mary is at the end now.

c) Find a person in line named "Josh." This function should return the position of 2 in the array, (recall that arrays are 0-based).

let findPerson = (name) => {
  return amusementParkMembers.indexOf(name);
}
console.log(findPerson('Josh')); //returns '2'

d) Find a person in line named "Emily." What should your function return if it does not find the item in the array?

let findPerson = (name) => {
  let index = amusementParkMembers.indexOf(name);
  if (index == -1){return 'Person not found.';}
  else{return index;}
}

e) What if Ava wants to allow a friend, "Melissa", to cut in line in front of her? How would you code this so Melissa appears before Ava?

let skipFriend = (friendName, skipperName) => {
  let index = amusementParkMembers.indexOf(friendName);
  amusementParkMembers.splice(index, 0, skipperName);
  return amusementParkMembers
}

console.log(skipFriend('Ava', 'Melissa'));

f) If Patrick wants to leave the line, how would you delete him from the array?

let removePerson = (name) => {
  let index = amusementParkMembers.indexOf(name);
    if (index > -1) {
      amusementParkMembers.splice(index, 1);
    }
}

removePerson('Patrick')

Provide another real-world example that you can model using a data structure.

Grocery store inventory (or any kind of store inventory) kept in an array.

For example:

const inventory = [
    {
    name: 'Apples',
    price: 3.99,
    inStock: false
    }
    {
    name: 'Backpack'
    price: 16.99,
    inStock: true,
    }
]

How would your data structure allow developers to access and manipulate the data?

They could use regular array methods to manipulate the data like I did above (splice, push, indexOf, etc). They could use functions to keep track of inventory and whether inStock is true or not, and if it's false, they could set it up to be ordered or alert someone to make a new order. 

Another idea is something like this:
let namesArray = inventory.map(e=>e.name)
console.log(namesArray.indexOf('Backpack'))

using map to create a names array and then using findIndex to be able to figure out where that object is in the inventory log.