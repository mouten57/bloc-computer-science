1. In your own words, explain what clean code is and why it is important.

Writing clean code is writing code in a way that is readable, easy to maintain, and simple enough to understand. Your goal is to creat a solution that allows other developers to inherit a situation that is clear, rather than handing them a 'rats nest' that may work at the time, but would be near-impossible to refactor.

//////////////////////
2. Think about another commonly used object that relies 
on computers and explain what would happen if the 
code was not created to an acceptable standard.

The first thing that came to my mind was safety systems in a some kind of reactor; let's say it's a nuclear reactor. If the code wasn't up to par, well, a whole lot of things could go wrong. It's very important for companys to use code that CANNOT fail, especially when dealing with machinery or structural systems that could put lives in danger if they malfunction.

//////////////////////
3.Would you consider the following to be clean code? 
Explain why or why not. If not, refactor the code.
FUNCTION do(x, y)               // Creating a new function
    IF y = "F" THEN               // Check if y is equal "F"
    SET z to (xâˆ’32) * (5/9)       // Formula to convert degrees fahrenheit to celsius
    PRINT z                       // Print result
    ELSE IF y = "C" THEN          // If y not equal to "F", check if equal to "C"
    SET z to x * 1.8000 + 32.00   // Formula to convert degrees celsius to fahrenheit
    PRINT z                       // Print result
    END IF
    
    I would probably split this into 2 separate methods, using the extracting methods example
    from the lesson. Also, I would give the function name more meaning.

    FUNCTION convertToCelsius(temp)
        SET convertedTemp to (temp-32) * (5/9)
        PRINT convertedTemp
    END FUNCTION

    FUNCTION convertToFahrenheit(temp)
        SET convertedTemp to (x * 1.8) + 32
        PRINT convertedTemp
    END FUNCTION
////////////////////////
4. Would you consider the following to be clean code? 
Explain why or why not. If not, refactor the code.

    FUNCTION calcPercent(sum, total)
    IF NOT(total = 0) THEN
        SET percentage to sum / total * 100
    ELSE
        PRINT "Sorry, cannot divide by 0"
    END IF

    PRINT percentage
    END FUNCTION

^The only thing I would change is changing the word "sum" to "part".
////////////////////////////////////////////
5. Using pseudocode, refactor the code for the following examples using 
the principles you have learned in this checkpoint.
(***for each of these I am listing my modified versions.****)
///////////////////////////////////////////
a. The following function prints the subtotal of a customer's transaction 
and receives payment accordingly.

FUNCTION checkOutCustomer(subTotal, discountRate, paymentType)
    let totalDue = subTotal * discountRate + (subTotal * tax)
   IF paymentType = 'CASH' THEN
       CALL getPayment RETURNING amount
       PRINT "Change due: " + amount - totalDue
   ELSE IF paymentType = 'CREDIT CARD' THEN
       CALL getPayment RETURNING amount
       PRINT "Your credit card has been charged: " + totalDue
   END IF
END FUNCTION
/////////////////////
b. The following function checks out a book if there are no issues with the guest's account.

FUNCTION checkoutBook(book, guest)
IF guest.outstandingFees > 0 THEN
    PRINT guest + "has outstanding fees."
ELSE IF guest.hasOverdueBooks THEN
    PRINT guest + "has overdue books."
ELSE IF guest.accountActive THEN
           APPEND book to guest.books
           SET book.status to "Checked Out"
           PRINT "Your books have been issued."
 ELSE
     PRINT "Account is not active."
 END IF
END FUNCTION
/////////////////////
c. The following class is a code snippet that should support the transactions a customer can perform at an ATM.

CLASS BankAccountActions

 FUNCTION displayBalance
    PRINT balance
 END FUNCTION

 FUNCTION deposit(amount)
    SET balance to balance + amount
 END FUNCTION

 FUNCTION withdraw(amount)
     IF balance > amount THEN
       SET balance to balance - amount
     END
 END FUNCTION

CLASS Offers

 FUNCTION creditCardOffer
     IF NOT(customer.hasCreditCard) THEN
         CALL offerCreditCard
     END
 END FUNCTION

 FUNCTION checkStatus
     IF NOT(customer.hasCheckingAccount) THEN
         CALL offerCheckingAccount
     END
 END FUNCTION

 ....
 ....
 ....

END
^I didn't change much on this one, just split them into 2 classes.
///////////////////////////////////////////////////////////////
Programming Questions
///////////////////////////////////////////////////////////////
6.Given an array of integers, find out whether the sum of the integers is a perfect square. If it is a perfect square, return the square root, otherwise return the sum.

const checkPerfectSquare = (array) => {
    let add = (a, b) =>
        a + b;
    let sum = array.reduce(add);
    let squareRootOfArray = Math.sqrt(sum);
    if (squareRootOfArray - Math.floor(squareRootOfArray) === 0) {
        return squareRootOfArray;
    }
    return sum;
}
/////////////////////
7. Given an array of integers, find out whether the array contains any duplicate elements. The function should return true if any value appears at least twice in the array, and false if every element is distinct.

const hasDuplicates = (array) => {
    return (new Set(array)).size !== array.length;
}
/////////////////////
8. Given two strings, stringOne and stringTwo, determine if stringOne is an anagram of stringTwo. Assume that the strings contain only lowercase letters and do not worry about case-sensitivity. Hint: Your first task will be to convert the strings to arrays.

const checkIfAnagrams = (string1, string2) => {
    let normalize = (str) => str.split('').sort().join('').trim();
    var sorted1 = normalize(string1);
    var sorted2 = normalize(string2);

    return (sorted1 === sorted2);
}
    
