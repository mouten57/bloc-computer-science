/////////////////////QUESTIONS////////////////////
1. What is a binary tree and what makes it unique to other trees?

-Trees are non-linear data structures. They donâ€™t store data in a linear way. They organize data hierarchically. A tree is a collection of entities called nodes. Nodes are connected by edges. Each node contains a value or data, and it may or may not have a child node .

-A binary tree is a specific type of tree data structure in which each node has at the most two children, which are referred to as the left child and the right child. 

2. What is a heuristic?

-A 'best guess' by a software engineer. It is a technique designed for solving a problem more quickly when classic methods are too slow, or for finding an approximate solution when classic methods fail to find any exact solution. This is achieved by trading optimality, completeness, accuracy, or precision for speed. In a way, it can be considered a shortcut.

3. What is another problem besides the shortest-path problem that requires the use of heuristics?

-Another example of heuristic making an algorithm faster occurs in certain search problems. Initially, the heuristic tries every possibility at each step, like the full-space search algorithm. But it can stop the search at any time if the current possibility is already worse than the best solution already found. 

4. What is the difference between a depth-first search and a breadth-first search?

-Depth-first search(DFS) is an algorithm that explores a path all the way from the root to a leaf before backtracking and exploring another path.

-Breadth-first search(BFS) is an algorithm that traverses the tree level by level and depth by depth. Start at the tree root and explore the neighbor nodes first, before moving to the next level neighbors.


5. Explain in your own words what an undirected, a-cyclic, unweighted graph is.

-A graph that connects nodes in an order that doesn't matter, results in a dead-end(no cycle or complete circuit), and does not assign cost of travel between nodes.

6. What kind of graph is a binary search tree?

-directed, a-cyclic, unweighted graph

/////////////////////EXERCISES////////////////////

For the following questions, describe in words how you could solve the problem and then do so. Use the depiction of the Binary Search Tree to refer to the examples.

1. Given a Binary Search Tree and a value, write a function that checks to see whether the value exists within the tree.
Example: The value 10 exists in the tree. The value 23 does not exist in the tree.
-I would create a function called search that takes in 2 arguments, the node to search through(in this case, the root node), and the data or number to search for. 
-I would first look to see to whether the node exists, if it doesn't, return 'this value doesnt exist in the tree.' 
-Then I would check to see if input data is larger or smaller than node.data. If smaller, keep moving left. If larger, move right. After each move, restart the search function.

-Once it finds that data is equal to the node data, return (`The value ${data} exists in the tree.`)

function Node(val) {
  this.value = val;
  this.left = null;
  this.right = null;
}

function BinarySearchTree() {
  this.root = null;
}

BinarySearchTree.prototype.push = function(val) {
  var root = this.root;

  if (!root) {
    this.root = new Node(val);
    return;
  }

  var currentNode = root;
  var newNode = new Node(val);

  while (currentNode) {
    if (val < currentNode.value) {
      if (!currentNode.left) {
        currentNode.left = newNode;
        break;
      } else {
        currentNode = currentNode.left;
      }
    } else {
      if (!currentNode.right) {
        currentNode.right = newNode;
        break;
      } else {
        currentNode = currentNode.right;
      }
    }
  }
};

BinarySearchTree.prototype.getRootNode = function()
{
    return this.root;
}

// search for a node with given data
BinarySearchTree.prototype.searchResult = function(rootNode, val) {
  if (!rootNode) {
    return("Value " + val + " does not exist in this tree.");
  }
  if (val < rootNode.value) {
    return this.searchResult(rootNode.left, val);
  } else if (val > rootNode.value) {
    return this.searchResult(rootNode.right, val);
  } else {
    return("Value " + val + " exists in this tree.");
  }
}

var binaryTree = new BinarySearchTree();
binaryTree.push(15);
binaryTree.push(10);
binaryTree.push(25);
binaryTree.push(9);
binaryTree.push(11);
binaryTree.push(19);
binaryTree.push(36);
binaryTree.push(8);
binaryTree.push(20);
binaryTree.push(41);

console.log(binaryTree.searchResult(binaryTree.root, 42)) // "Value 42 does not exist in this tree."
console.log(binaryTree.searchResult(binaryTree.root, 41)) // "Value 41 exists in this tree."

2. Given a Binary Search Tree and two nodes, n1 and n2, write a function that finds the distance between the two nodes.
Example: The distance between the nodes 4 and 10 is 4. The distance between the nodes 8 and 10 is 1. The distance between the nodes 1 and 14 is 4.

function Node(val) {
  this.value = val;
  this.left = null;
  this.right = null;
}

function BinarySearchTree() {
  this.root = null;
}

BinarySearchTree.prototype.push = function(val) {
  var root = this.root;

  if (!root) {
    this.root = new Node(val);
    return;
  }

  var currentNode = root;
  var newNode = new Node(val);

  while (currentNode) {
    if (val < currentNode.value) {
      if (!currentNode.left) {
        currentNode.left = newNode;
        break;
      } else {
        currentNode = currentNode.left;
      }
    } else {
      if (!currentNode.right) {
        currentNode.right = newNode;
        break;
      } else {
        currentNode = currentNode.right;
      }
    }
  }
};

BinarySearchTree.prototype.searchBool = function(rootNode, val) {
  if (!rootNode) {
    return false;
  }
  if (val < rootNode.value) {
    return this.searchBool(rootNode.left, val);
  } else if (val > rootNode.value) {
    return this.searchBool(rootNode.right, val);
  } else {
    return true;
  }
}

BinarySearchTree.prototype.distanceFromRoot = function(root, node) {
    let counter=0;
     if (!this.searchBool(root, node)) {
      return 'node does not exist';
    }else if (root.value == node) {
    counter = 0;
  } else if (root.value > node) {
    counter = 1 + this.distanceFromRoot(root.left, node);
  } else {
    counter = 1 + this.distanceFromRoot(root.right, node); 
  }
  return counter;
}


BinarySearchTree.prototype.distanceBetween = function(root, node1, node2) {
  if (this.searchBool(binaryTree.root, node1) && this.searchBool(binaryTree.root, node2)) {
    if (node1===root && node2===root){
      return `Total distance between nodes: 0`
    } else if (node1===root) {
      return `Total distance between nodes: ${this.distanceFromRoot(root, node2)}`;
    } else if (node2===root) {
      return `Total distance between nodes: ${this.distanceFromRoot(root, node1)}`;
      ;
    }
      
    // Both lie in left
    if (root.value > node1 && root.value > node2) {
      if (node1 < node2){
        return this.distanceBetween(root.left, node1, node2);
      }else{ 
        return this.distanceBetween(root.left, node2, node1);
      }
    }
    // Both lie in right
    if (root.value < node1 && root.value < node2) {
      if (node1 < node2){
        return this.distanceBetween(root.right, node1, node2);
      }else{ 
        return this.distanceBetween(root.right, node2, node1);
      }
      return this.distanceBetween(root.right, node1, node2);
    }
    // Lie in opposite directions (Root is LCA of two nodes)
    if (root.value >= node1 && root.value <= node2) {
      return `Total distance between nodes: ${this.distanceFromRoot(root, node1) + this.distanceFromRoot(root, node2)}` ;
    }
  } else {
    return "One or both of the selected nodes does not exist in the tree";
  }
}

// Inserting nodes to the BinarySearchTree
var binaryTree = new BinarySearchTree();
binaryTree.push(15);
binaryTree.push(10);
binaryTree.push(25);
binaryTree.push(9);
binaryTree.push(11);
binaryTree.push(19);
binaryTree.push(36);
binaryTree.push(8);
binaryTree.push(20);
binaryTree.push(41);

console.log(binaryTree.distanceBetween(binaryTree.root, 8, 41)) //"Total distance between nodes: 6"
console.log(binaryTree.distanceBetween(binaryTree.root, 15, 36)) //"Total distance between nodes: 2"
console.log(binaryTree.distanceBetween(binaryTree.root, binaryTree.root, binaryTree.root))//"Total distance between nodes: 0"
console.log(binaryTree.distanceBetween(binaryTree.root,binaryTree.root, 25 )) //"Total distance between nodes: 1"
console.log(binaryTree.distanceBetween(binaryTree.root, 36,binaryTree.root )) //"Total distance between nodes: 2"
console.log(binaryTree.distanceBetween(binaryTree.root, 8, binaryTree.root )) //"Total distance between nodes: 3"
